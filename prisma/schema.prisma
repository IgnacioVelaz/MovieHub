// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mongodb"
//   url      = env("URI")
// }

// model User {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   email     String   @unique
//   name      String
//   password  String
//   movies    Movies[]

//   @@map("users")
// }

// model Movies {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   name         String   @unique
//   poster_image String
//   score        Float
//   userId       String?  @db.ObjectId
//   User         User?    @relation(fields: [userId], references: [id])
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   genresIds    String[] @db.ObjectId
//   genres       Genres[] @relation(fields: [genresIds], references: [id])

//   @@map("movies")
// }

// model Genres {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String
//   moviesIds String[] @db.ObjectId
//   movies    Movies[] @relation(fields: [moviesIds], references: [id])

//   @@map("genres")
// }

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("URI")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String
  password  String
  movies    Movies[]

  @@map("users")
}

model Movies {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String   @unique
  poster_image String
  score        Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  genresIds    String[] @db.ObjectId
  genres       Genres[] @relation(fields: [genresIds], references: [id])
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId

  @@map("movies")
}

model Genres {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime? @updatedAt
  name      String
  moviesIds String[]  @db.ObjectId
  movies    Movies[]  @relation(fields: [moviesIds], references: [id])

  @@map("genres")
}
